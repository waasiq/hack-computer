// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit) [16 bit ALU]
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not

// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input
        nx, // negate the x input
        zy, // zero the y input
        ny, // negate the y input
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:

    // Preprocessing X Input
    Mux16(a=x, b=false, sel=zx, out=xMux);
    Not16(in=xMux, out=xNot);
    Mux16(a=xMux, b=xNot, sel=nx, out=finalX);

    // Preprocessing Y Input
    Mux16(a=y, b=false, sel=zy, out=yMux);
    Not16(in=yMux, out=yNot);
    Mux16(a=yMux, b=yNot, sel=ny, out=finalY);

    // Selecting btw + or & operation
    And16(a=finalX, b=finalY, out=andOut);
    Add16(a=finalX, b=finalY, out=addOut);
    Mux16(a=andOut, b=addOut, sel=f, out=finalOut);

    // Post setting the output
    Not16(in=finalOut, out=notOut);
    Mux16(a=finalOut, b=notOut, sel=no, out=out, out[15]=fOut, out[0..7]=fLeft, out[8..15]=fRight); 

      // Setting zr
      Or8Way(in=fLeft, out=zrl);
      Or8Way(in=fRight, out=zrr);
      Or(a=zrl, b=zrr, out=nzr);
      Not(in=nzr, out=zr);

      // Setting ng 
      And(a=fOut, b=true, out=ng);
}